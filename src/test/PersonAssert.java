package test;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;

import main.Person;

/**
 * {@link Person} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PersonAssert extends AbstractAssert<PersonAssert, Person> {

	/**
	 * Creates a new </code>{@link PersonAssert}</code> to make assertions on actual Person.
	 * @param actual the Person we want to make assertions on.
	 */
	public PersonAssert(Person actual) {
		super(actual, PersonAssert.class);
	}

	/**
	 * An entry point for PersonAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly : <code>assertThat(myPerson)</code> and get specific assertion with code completion.
	 * @param actual the Person we want to make assertions on.
	 * @return a new </code>{@link PersonAssert}</code>
	 */
	public static PersonAssert assertThat(Person actual) {
		return new PersonAssert(actual);
	}

	/**
	 * Verifies that the actual Person is alive.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Person is not alive.
	 */
	public PersonAssert isAlive() {
		// check that actual Person we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("Expected actual Person to be alive but was not.", actual);

		// check
		if (!actual.isAlive())
			throw new AssertionError(errorMessage);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Person is not alive.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Person is alive.
	 */
	public PersonAssert isNotAlive() {
		// check that actual Person we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("Expected actual Person not to be alive but was.", actual);

		// check
		if (actual.isAlive())
			throw new AssertionError(errorMessage);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Person's name is equal to the given one.
	 * @param name the given name to compare the actual Person's name to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Person's name is not equal to the given one.
	 */
	public PersonAssert hasName(String name) {
		// check that actual Person we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> name to be:\n  <%s>\n but was:\n  <%s>", actual, name,
				actual.getName());

		// check
		if (!actual.getName().equals(name)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Person's numberOfNeighbor is equal to the given one.
	 * @param numberOfNeighbor the given numberOfNeighbor to compare the actual Person's numberOfNeighbor to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Person's numberOfNeighbor is not equal to the given one.
	 */
	public PersonAssert hasNumberOfNeighbor(int numberOfNeighbor) {
		// check that actual Person we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> numberOfNeighbor to be:\n  <%s>\n but was:\n  <%s>", actual,
				numberOfNeighbor, actual.getNumberOfNeighbor());

		// check
		if (actual.getNumberOfNeighbor() != numberOfNeighbor) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Person's x is equal to the given one.
	 * @param x the given x to compare the actual Person's x to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Person's x is not equal to the given one.
	 */
	public PersonAssert hasX(int x) {
		// check that actual Person we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> x to be:\n  <%s>\n but was:\n  <%s>", actual, x, actual.getX());

		// check
		if (actual.getX() != x) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Person's y is equal to the given one.
	 * @param y the given y to compare the actual Person's y to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Person's y is not equal to the given one.
	 */
	public PersonAssert hasY(int y) {
		// check that actual Person we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> y to be:\n  <%s>\n but was:\n  <%s>", actual, y, actual.getY());

		// check
		if (actual.getY() != y) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

}
